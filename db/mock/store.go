// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aalug/blog-go/db/sqlc (interfaces: Store)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"

	db "github.com/aalug/blog-go/db/sqlc"
	gomock "github.com/golang/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// AddMultipleTagsToPost mocks base method.
func (m *MockStore) AddMultipleTagsToPost(arg0 context.Context, arg1 db.AddMultipleTagsToPostParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMultipleTagsToPost", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddMultipleTagsToPost indicates an expected call of AddMultipleTagsToPost.
func (mr *MockStoreMockRecorder) AddMultipleTagsToPost(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMultipleTagsToPost", reflect.TypeOf((*MockStore)(nil).AddMultipleTagsToPost), arg0, arg1)
}

// AddTagToPost mocks base method.
func (m *MockStore) AddTagToPost(arg0 context.Context, arg1 db.AddTagToPostParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTagToPost", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddTagToPost indicates an expected call of AddTagToPost.
func (mr *MockStoreMockRecorder) AddTagToPost(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTagToPost", reflect.TypeOf((*MockStore)(nil).AddTagToPost), arg0, arg1)
}

// AddTagsToPost mocks base method.
func (m *MockStore) AddTagsToPost(arg0 context.Context, arg1 db.AddTagsToPostParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTagsToPost", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddTagsToPost indicates an expected call of AddTagsToPost.
func (mr *MockStoreMockRecorder) AddTagsToPost(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTagsToPost", reflect.TypeOf((*MockStore)(nil).AddTagsToPost), arg0, arg1)
}

// CreateCategory mocks base method.
func (m *MockStore) CreateCategory(arg0 context.Context, arg1 string) (db.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCategory", arg0, arg1)
	ret0, _ := ret[0].(db.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCategory indicates an expected call of CreateCategory.
func (mr *MockStoreMockRecorder) CreateCategory(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCategory", reflect.TypeOf((*MockStore)(nil).CreateCategory), arg0, arg1)
}

// CreateComment mocks base method.
func (m *MockStore) CreateComment(arg0 context.Context, arg1 db.CreateCommentParams) (db.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateComment", arg0, arg1)
	ret0, _ := ret[0].(db.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateComment indicates an expected call of CreateComment.
func (mr *MockStoreMockRecorder) CreateComment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateComment", reflect.TypeOf((*MockStore)(nil).CreateComment), arg0, arg1)
}

// CreatePost mocks base method.
func (m *MockStore) CreatePost(arg0 context.Context, arg1 db.CreatePostParams) (db.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePost", arg0, arg1)
	ret0, _ := ret[0].(db.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePost indicates an expected call of CreatePost.
func (mr *MockStoreMockRecorder) CreatePost(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePost", reflect.TypeOf((*MockStore)(nil).CreatePost), arg0, arg1)
}

// CreateTag mocks base method.
func (m *MockStore) CreateTag(arg0 context.Context, arg1 string) (db.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTag", arg0, arg1)
	ret0, _ := ret[0].(db.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTag indicates an expected call of CreateTag.
func (mr *MockStoreMockRecorder) CreateTag(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTag", reflect.TypeOf((*MockStore)(nil).CreateTag), arg0, arg1)
}

// CreateUser mocks base method.
func (m *MockStore) CreateUser(arg0 context.Context, arg1 db.CreateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockStoreMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockStore)(nil).CreateUser), arg0, arg1)
}

// DeleteCategory mocks base method.
func (m *MockStore) DeleteCategory(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCategory", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCategory indicates an expected call of DeleteCategory.
func (mr *MockStoreMockRecorder) DeleteCategory(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCategory", reflect.TypeOf((*MockStore)(nil).DeleteCategory), arg0, arg1)
}

// DeleteComment mocks base method.
func (m *MockStore) DeleteComment(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteComment", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteComment indicates an expected call of DeleteComment.
func (mr *MockStoreMockRecorder) DeleteComment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteComment", reflect.TypeOf((*MockStore)(nil).DeleteComment), arg0, arg1)
}

// DeletePost mocks base method.
func (m *MockStore) DeletePost(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePost", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePost indicates an expected call of DeletePost.
func (mr *MockStoreMockRecorder) DeletePost(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePost", reflect.TypeOf((*MockStore)(nil).DeletePost), arg0, arg1)
}

// DeleteTag mocks base method.
func (m *MockStore) DeleteTag(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTag", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTag indicates an expected call of DeleteTag.
func (mr *MockStoreMockRecorder) DeleteTag(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTag", reflect.TypeOf((*MockStore)(nil).DeleteTag), arg0, arg1)
}

// DeleteTagsFromPost mocks base method.
func (m *MockStore) DeleteTagsFromPost(arg0 context.Context, arg1 db.DeleteTagsFromPostParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTagsFromPost", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTagsFromPost indicates an expected call of DeleteTagsFromPost.
func (mr *MockStoreMockRecorder) DeleteTagsFromPost(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTagsFromPost", reflect.TypeOf((*MockStore)(nil).DeleteTagsFromPost), arg0, arg1)
}

// DeleteUser mocks base method.
func (m *MockStore) DeleteUser(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockStoreMockRecorder) DeleteUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockStore)(nil).DeleteUser), arg0, arg1)
}

// GetOrCreateTags mocks base method.
func (m *MockStore) GetOrCreateTags(arg0 context.Context, arg1 []string) ([]int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrCreateTags", arg0, arg1)
	ret0, _ := ret[0].([]int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrCreateTags indicates an expected call of GetOrCreateTags.
func (mr *MockStoreMockRecorder) GetOrCreateTags(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrCreateTags", reflect.TypeOf((*MockStore)(nil).GetOrCreateTags), arg0, arg1)
}

// GetPostByID mocks base method.
func (m *MockStore) GetPostByID(arg0 context.Context, arg1 int64) (db.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostByID", arg0, arg1)
	ret0, _ := ret[0].(db.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostByID indicates an expected call of GetPostByID.
func (mr *MockStoreMockRecorder) GetPostByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostByID", reflect.TypeOf((*MockStore)(nil).GetPostByID), arg0, arg1)
}

// GetPostByTitle mocks base method.
func (m *MockStore) GetPostByTitle(arg0 context.Context, arg1 string) (db.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostByTitle", arg0, arg1)
	ret0, _ := ret[0].(db.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostByTitle indicates an expected call of GetPostByTitle.
func (mr *MockStoreMockRecorder) GetPostByTitle(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostByTitle", reflect.TypeOf((*MockStore)(nil).GetPostByTitle), arg0, arg1)
}

// GetTagsOfPost mocks base method.
func (m *MockStore) GetTagsOfPost(arg0 context.Context, arg1 int64) ([]db.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTagsOfPost", arg0, arg1)
	ret0, _ := ret[0].([]db.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTagsOfPost indicates an expected call of GetTagsOfPost.
func (mr *MockStoreMockRecorder) GetTagsOfPost(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTagsOfPost", reflect.TypeOf((*MockStore)(nil).GetTagsOfPost), arg0, arg1)
}

// GetUser mocks base method.
func (m *MockStore) GetUser(arg0 context.Context, arg1 string) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockStoreMockRecorder) GetUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockStore)(nil).GetUser), arg0, arg1)
}

// ListCategories mocks base method.
func (m *MockStore) ListCategories(arg0 context.Context, arg1 db.ListCategoriesParams) ([]db.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCategories", arg0, arg1)
	ret0, _ := ret[0].([]db.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCategories indicates an expected call of ListCategories.
func (mr *MockStoreMockRecorder) ListCategories(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCategories", reflect.TypeOf((*MockStore)(nil).ListCategories), arg0, arg1)
}

// ListCommentsForPost mocks base method.
func (m *MockStore) ListCommentsForPost(arg0 context.Context, arg1 db.ListCommentsForPostParams) ([]db.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCommentsForPost", arg0, arg1)
	ret0, _ := ret[0].([]db.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCommentsForPost indicates an expected call of ListCommentsForPost.
func (mr *MockStoreMockRecorder) ListCommentsForPost(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCommentsForPost", reflect.TypeOf((*MockStore)(nil).ListCommentsForPost), arg0, arg1)
}

// ListPosts mocks base method.
func (m *MockStore) ListPosts(arg0 context.Context, arg1 db.ListPostsParams) ([]db.ListPostsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPosts", arg0, arg1)
	ret0, _ := ret[0].([]db.ListPostsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPosts indicates an expected call of ListPosts.
func (mr *MockStoreMockRecorder) ListPosts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPosts", reflect.TypeOf((*MockStore)(nil).ListPosts), arg0, arg1)
}

// ListPostsByAuthor mocks base method.
func (m *MockStore) ListPostsByAuthor(arg0 context.Context, arg1 db.ListPostsByAuthorParams) ([]db.ListPostsByAuthorRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPostsByAuthor", arg0, arg1)
	ret0, _ := ret[0].([]db.ListPostsByAuthorRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPostsByAuthor indicates an expected call of ListPostsByAuthor.
func (mr *MockStoreMockRecorder) ListPostsByAuthor(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPostsByAuthor", reflect.TypeOf((*MockStore)(nil).ListPostsByAuthor), arg0, arg1)
}

// ListPostsByCategory mocks base method.
func (m *MockStore) ListPostsByCategory(arg0 context.Context, arg1 db.ListPostsByCategoryParams) ([]db.ListPostsByCategoryRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPostsByCategory", arg0, arg1)
	ret0, _ := ret[0].([]db.ListPostsByCategoryRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPostsByCategory indicates an expected call of ListPostsByCategory.
func (mr *MockStoreMockRecorder) ListPostsByCategory(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPostsByCategory", reflect.TypeOf((*MockStore)(nil).ListPostsByCategory), arg0, arg1)
}

// ListPostsByTags mocks base method.
func (m *MockStore) ListPostsByTags(arg0 context.Context, arg1 db.ListPostsByTagsParams) ([]db.ListPostsByTagsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPostsByTags", arg0, arg1)
	ret0, _ := ret[0].([]db.ListPostsByTagsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPostsByTags indicates an expected call of ListPostsByTags.
func (mr *MockStoreMockRecorder) ListPostsByTags(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPostsByTags", reflect.TypeOf((*MockStore)(nil).ListPostsByTags), arg0, arg1)
}

// ListTagIDsByNames mocks base method.
func (m *MockStore) ListTagIDsByNames(arg0 context.Context, arg1 []string) ([]int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagIDsByNames", arg0, arg1)
	ret0, _ := ret[0].([]int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagIDsByNames indicates an expected call of ListTagIDsByNames.
func (mr *MockStoreMockRecorder) ListTagIDsByNames(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagIDsByNames", reflect.TypeOf((*MockStore)(nil).ListTagIDsByNames), arg0, arg1)
}

// ListTags mocks base method.
func (m *MockStore) ListTags(arg0 context.Context, arg1 db.ListTagsParams) ([]db.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTags", arg0, arg1)
	ret0, _ := ret[0].([]db.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTags indicates an expected call of ListTags.
func (mr *MockStoreMockRecorder) ListTags(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTags", reflect.TypeOf((*MockStore)(nil).ListTags), arg0, arg1)
}

// RemoveTagsFromPost mocks base method.
func (m *MockStore) RemoveTagsFromPost(arg0 context.Context, arg1 db.RemoveTagsFromPostParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveTagsFromPost", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveTagsFromPost indicates an expected call of RemoveTagsFromPost.
func (mr *MockStoreMockRecorder) RemoveTagsFromPost(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTagsFromPost", reflect.TypeOf((*MockStore)(nil).RemoveTagsFromPost), arg0, arg1)
}

// UpdateCategory mocks base method.
func (m *MockStore) UpdateCategory(arg0 context.Context, arg1 db.UpdateCategoryParams) (db.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCategory", arg0, arg1)
	ret0, _ := ret[0].(db.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCategory indicates an expected call of UpdateCategory.
func (mr *MockStoreMockRecorder) UpdateCategory(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCategory", reflect.TypeOf((*MockStore)(nil).UpdateCategory), arg0, arg1)
}

// UpdateComment mocks base method.
func (m *MockStore) UpdateComment(arg0 context.Context, arg1 db.UpdateCommentParams) (db.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateComment", arg0, arg1)
	ret0, _ := ret[0].(db.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateComment indicates an expected call of UpdateComment.
func (mr *MockStoreMockRecorder) UpdateComment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateComment", reflect.TypeOf((*MockStore)(nil).UpdateComment), arg0, arg1)
}

// UpdatePost mocks base method.
func (m *MockStore) UpdatePost(arg0 context.Context, arg1 db.UpdatePostParams) (db.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePost", arg0, arg1)
	ret0, _ := ret[0].(db.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePost indicates an expected call of UpdatePost.
func (mr *MockStoreMockRecorder) UpdatePost(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePost", reflect.TypeOf((*MockStore)(nil).UpdatePost), arg0, arg1)
}

// UpdateTag mocks base method.
func (m *MockStore) UpdateTag(arg0 context.Context, arg1 db.UpdateTagParams) (db.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTag", arg0, arg1)
	ret0, _ := ret[0].(db.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTag indicates an expected call of UpdateTag.
func (mr *MockStoreMockRecorder) UpdateTag(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTag", reflect.TypeOf((*MockStore)(nil).UpdateTag), arg0, arg1)
}
