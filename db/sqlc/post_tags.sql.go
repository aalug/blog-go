// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: post_tags.sql

package db

import (
	"context"

	"github.com/lib/pq"
)

const addMultipleTagsToPost = `-- name: AddMultipleTagsToPost :exec
WITH input_tags AS (SELECT UNNEST($2::int[]) AS tag_id)
INSERT
INTO post_tags (post_id, tag_id)
SELECT $1, tag_id
FROM input_tags
`

type AddMultipleTagsToPostParams struct {
	PostID int64   `json:"post_id"`
	TagIds []int32 `json:"tag_ids"`
}

func (q *Queries) AddMultipleTagsToPost(ctx context.Context, arg AddMultipleTagsToPostParams) error {
	_, err := q.db.ExecContext(ctx, addMultipleTagsToPost, arg.PostID, pq.Array(arg.TagIds))
	return err
}

const addTagToPost = `-- name: AddTagToPost :exec
INSERT INTO post_tags
    (post_id, tag_id)
VALUES ($1, $2)
`

type AddTagToPostParams struct {
	PostID int64 `json:"post_id"`
	TagID  int32 `json:"tag_id"`
}

func (q *Queries) AddTagToPost(ctx context.Context, arg AddTagToPostParams) error {
	_, err := q.db.ExecContext(ctx, addTagToPost, arg.PostID, arg.TagID)
	return err
}

const deleteTagsFromPost = `-- name: DeleteTagsFromPost :exec
WITH deleted_tags AS (
    DELETE FROM post_tags
        WHERE post_id = $1::int
            AND tag_id = ANY ($2::int[])
        RETURNING tag_id)
DELETE
FROM tags
WHERE id IN (SELECT dt.tag_id
             FROM deleted_tags dt
             WHERE dt.tag_id NOT IN (SELECT tag_id
                                     FROM post_tags))
`

type DeleteTagsFromPostParams struct {
	PostID int32   `json:"post_id"`
	TagIds []int32 `json:"tag_ids"`
}

func (q *Queries) DeleteTagsFromPost(ctx context.Context, arg DeleteTagsFromPostParams) error {
	_, err := q.db.ExecContext(ctx, deleteTagsFromPost, arg.PostID, pq.Array(arg.TagIds))
	return err
}

const getTagsOfPost = `-- name: GetTagsOfPost :many
SELECT t.id, t.name
FROM tags AS t
         JOIN post_tags AS pt ON pt.tag_id = t.id
WHERE pt.post_id = $1
`

func (q *Queries) GetTagsOfPost(ctx context.Context, postID int64) ([]Tag, error) {
	rows, err := q.db.QueryContext(ctx, getTagsOfPost, postID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Tag{}
	for rows.Next() {
		var i Tag
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
