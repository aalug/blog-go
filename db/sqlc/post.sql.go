// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: post.sql

package db

import (
	"context"
	"time"

	"github.com/lib/pq"
)

const createPost = `-- name: CreatePost :one
INSERT INTO posts
    (title, description, content, author_id, category_id, image)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, title, description, content, author_id, category_id, image, created_at, updated_at
`

type CreatePostParams struct {
	Title       string `json:"title"`
	Description string `json:"description"`
	Content     string `json:"content"`
	AuthorID    int32  `json:"author_id"`
	CategoryID  int32  `json:"category_id"`
	Image       string `json:"image"`
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, createPost,
		arg.Title,
		arg.Description,
		arg.Content,
		arg.AuthorID,
		arg.CategoryID,
		arg.Image,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Content,
		&i.AuthorID,
		&i.CategoryID,
		&i.Image,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deletePost = `-- name: DeletePost :exec
DELETE
FROM posts
WHERE id = $1
`

func (q *Queries) DeletePost(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deletePost, id)
	return err
}

const getPostByID = `-- name: GetPostByID :one
SELECT p.id,
       p.title,
       p.description,
       p.content,
       u.username AS author_username,
       c.name     AS category_name,
       p.image,
       p.created_at
FROM posts p
         JOIN users u ON p.author_id = u.id
         JOIN categories c ON p.category_id = c.id
WHERE p.id = $1
`

type GetPostByIDRow struct {
	ID             int64     `json:"id"`
	Title          string    `json:"title"`
	Description    string    `json:"description"`
	Content        string    `json:"content"`
	AuthorUsername string    `json:"author_username"`
	CategoryName   string    `json:"category_name"`
	Image          string    `json:"image"`
	CreatedAt      time.Time `json:"created_at"`
}

func (q *Queries) GetPostByID(ctx context.Context, id int64) (GetPostByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getPostByID, id)
	var i GetPostByIDRow
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Content,
		&i.AuthorUsername,
		&i.CategoryName,
		&i.Image,
		&i.CreatedAt,
	)
	return i, err
}

const getPostByTitle = `-- name: GetPostByTitle :one
SELECT p.id,
       p.title,
       p.description,
       p.content,
       u.username AS author_username,
       c.name     AS category_name,
       p.image,
       p.created_at
FROM posts p
         JOIN users u ON p.author_id = u.id
         JOIN categories c ON p.category_id = c.id
WHERE p.title = $1
`

type GetPostByTitleRow struct {
	ID             int64     `json:"id"`
	Title          string    `json:"title"`
	Description    string    `json:"description"`
	Content        string    `json:"content"`
	AuthorUsername string    `json:"author_username"`
	CategoryName   string    `json:"category_name"`
	Image          string    `json:"image"`
	CreatedAt      time.Time `json:"created_at"`
}

func (q *Queries) GetPostByTitle(ctx context.Context, title string) (GetPostByTitleRow, error) {
	row := q.db.QueryRowContext(ctx, getPostByTitle, title)
	var i GetPostByTitleRow
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Content,
		&i.AuthorUsername,
		&i.CategoryName,
		&i.Image,
		&i.CreatedAt,
	)
	return i, err
}

const listPosts = `-- name: ListPosts :many
SELECT p.title,
       p.description,
       u.username AS author_username,
       c.name     AS category_name,
       p.image,
       p.created_at
FROM posts p
         JOIN users u ON p.author_id = u.id
         JOIN categories c ON p.category_id = c.id
ORDER BY p.created_at DESC
LIMIT $1 OFFSET $2
`

type ListPostsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type ListPostsRow struct {
	Title          string    `json:"title"`
	Description    string    `json:"description"`
	AuthorUsername string    `json:"author_username"`
	CategoryName   string    `json:"category_name"`
	Image          string    `json:"image"`
	CreatedAt      time.Time `json:"created_at"`
}

func (q *Queries) ListPosts(ctx context.Context, arg ListPostsParams) ([]ListPostsRow, error) {
	rows, err := q.db.QueryContext(ctx, listPosts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListPostsRow{}
	for rows.Next() {
		var i ListPostsRow
		if err := rows.Scan(
			&i.Title,
			&i.Description,
			&i.AuthorUsername,
			&i.CategoryName,
			&i.Image,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPostsByAuthor = `-- name: ListPostsByAuthor :many
SELECT p.title,
       p.description,
       u.username AS author_username,
       c.name     AS category_name,
       p.image,
       p.created_at
FROM posts p
         JOIN users u ON p.author_id = u.id
         JOIN categories c ON p.category_id = c.id
WHERE p.author_id = $1
ORDER BY p.created_at DESC
LIMIT $2 OFFSET $3
`

type ListPostsByAuthorParams struct {
	AuthorID int32 `json:"author_id"`
	Limit    int32 `json:"limit"`
	Offset   int32 `json:"offset"`
}

type ListPostsByAuthorRow struct {
	Title          string    `json:"title"`
	Description    string    `json:"description"`
	AuthorUsername string    `json:"author_username"`
	CategoryName   string    `json:"category_name"`
	Image          string    `json:"image"`
	CreatedAt      time.Time `json:"created_at"`
}

func (q *Queries) ListPostsByAuthor(ctx context.Context, arg ListPostsByAuthorParams) ([]ListPostsByAuthorRow, error) {
	rows, err := q.db.QueryContext(ctx, listPostsByAuthor, arg.AuthorID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListPostsByAuthorRow{}
	for rows.Next() {
		var i ListPostsByAuthorRow
		if err := rows.Scan(
			&i.Title,
			&i.Description,
			&i.AuthorUsername,
			&i.CategoryName,
			&i.Image,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPostsByCategory = `-- name: ListPostsByCategory :many
SELECT p.title,
       p.description,
       u.username AS author_username,
       c.name     AS category_name,
       p.image,
       p.created_at
FROM posts p
         JOIN users u ON p.author_id = u.id
         JOIN categories c ON p.category_id = c.id
WHERE c.id = $1
ORDER BY p.created_at DESC
LIMIT $2 OFFSET $3
`

type ListPostsByCategoryParams struct {
	ID     int64 `json:"id"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type ListPostsByCategoryRow struct {
	Title          string    `json:"title"`
	Description    string    `json:"description"`
	AuthorUsername string    `json:"author_username"`
	CategoryName   string    `json:"category_name"`
	Image          string    `json:"image"`
	CreatedAt      time.Time `json:"created_at"`
}

func (q *Queries) ListPostsByCategory(ctx context.Context, arg ListPostsByCategoryParams) ([]ListPostsByCategoryRow, error) {
	rows, err := q.db.QueryContext(ctx, listPostsByCategory, arg.ID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListPostsByCategoryRow{}
	for rows.Next() {
		var i ListPostsByCategoryRow
		if err := rows.Scan(
			&i.Title,
			&i.Description,
			&i.AuthorUsername,
			&i.CategoryName,
			&i.Image,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPostsByTags = `-- name: ListPostsByTags :many
SELECT p.title,
       p.description,
       u.username AS author_username,
       c.name     AS category_name,
       p.image,
       p.created_at
FROM posts p
         JOIN users u ON p.author_id = u.id
         JOIN categories c ON p.category_id = c.id
         JOIN post_tags pt ON p.id = pt.post_id
         JOIN tags t ON pt.tag_id = t.id
WHERE t.id = ANY ($3::int[])
ORDER BY p.created_at DESC
LIMIT $1 OFFSET $2
`

type ListPostsByTagsParams struct {
	Limit  int32   `json:"limit"`
	Offset int32   `json:"offset"`
	TagIds []int32 `json:"tag_ids"`
}

type ListPostsByTagsRow struct {
	Title          string    `json:"title"`
	Description    string    `json:"description"`
	AuthorUsername string    `json:"author_username"`
	CategoryName   string    `json:"category_name"`
	Image          string    `json:"image"`
	CreatedAt      time.Time `json:"created_at"`
}

func (q *Queries) ListPostsByTags(ctx context.Context, arg ListPostsByTagsParams) ([]ListPostsByTagsRow, error) {
	rows, err := q.db.QueryContext(ctx, listPostsByTags, arg.Limit, arg.Offset, pq.Array(arg.TagIds))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListPostsByTagsRow{}
	for rows.Next() {
		var i ListPostsByTagsRow
		if err := rows.Scan(
			&i.Title,
			&i.Description,
			&i.AuthorUsername,
			&i.CategoryName,
			&i.Image,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePost = `-- name: UpdatePost :one
UPDATE posts
SET title       = COALESCE($2, title),
    description = COALESCE($3, description),
    content     = COALESCE($4, content),
    category_id = COALESCE($5, category_id),
    image       = COALESCE($6, image),
    updated_at  = $7
WHERE id = $1
RETURNING id, title, description, content, author_id, category_id, image, created_at, updated_at
`

type UpdatePostParams struct {
	ID          int64     `json:"id"`
	Title       string    `json:"title"`
	Description string    `json:"description"`
	Content     string    `json:"content"`
	CategoryID  int32     `json:"category_id"`
	Image       string    `json:"image"`
	UpdatedAt   time.Time `json:"updated_at"`
}

func (q *Queries) UpdatePost(ctx context.Context, arg UpdatePostParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, updatePost,
		arg.ID,
		arg.Title,
		arg.Description,
		arg.Content,
		arg.CategoryID,
		arg.Image,
		arg.UpdatedAt,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Content,
		&i.AuthorID,
		&i.CategoryID,
		&i.Image,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
